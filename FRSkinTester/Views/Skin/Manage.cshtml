@model FRSkinTester.Models.ManageModelViewModel

@{
    ViewBag.Title = "Manage";
    var previews = Model.Skin.Previews.Select((x, i) => (x, i)).ToList();
    var scries = previews.Where(x => x.Item1.DragonId == null).ToList();
    var reals = previews.Where(x => x.Item1.DragonId != null).GroupBy(x => x.Item1.DragonId).Select(x => x.First()).ToList();
    var previewDragons = reals.Concat(scries).Select(x => FRSkinTester.Infrastructure.DataModels.DragonCache.FromString(x.Item1.DragonData));
}

@section head {
    @Scripts.Render("~/bundles/chartjs")
}

<div class="row">
    <div class="col-md-7">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h2>
                    Manage: @(Model.Skin.Title)
                </h2>
            </div>
            <div class="panel-body">
                <p>
                    Here you can edit your skin's details and view what people have previewed your skin on
                </p>
                <div>
                    @Html.Partial("_ManageEditSkin", new FRSkinTester.Models.ManageModelPost
               {
                   Title = Model.Skin.Title,
                   Description = Model.Skin.Description,
                   DragonType = (FRSkinTester.Models.DragonType)Model.Skin.DragonType,
                   Gender = (FRSkinTester.Models.Gender)Model.Skin.GenderType
               })
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-5">
        <div class="panel panel-default">
            <div class="panel-body">
                <div class="text-center">
                    <img class="dragonImage" src="@(Model.PreviewUrl)" />
                </div>
                <div>
                    <p class="text-center">
                        Coverage: <b>@(Model.Skin.Coverage)%</b> (@(Model.Skin.Coverage <= 30 ? "Accent" : "Skin"))
                    </p>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-7">
        <div class="panel panel-warning">
            <div class="panel-heading">
                Your share link
            </div>
            <div class="panel-body">
                <div class="form-horizontal">
                    <div class="form-group">
                        <label style="padding-top:7px; text-align:left" class="col-md-4 control-label" for="PreviewLink">
                            Dragon preview
                        </label>
                        <div class="col-md-8">
                            @Html.CopyTextBox(Url.RouteUrl("Preview", new { SkinId = Model.Skin.GeneratedId }, "https"), "PreviewLink")
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="panel panel-success">
            <div class="panel-heading">
                These are the previews people have generated with your skin
            </div>
            <div class="panel-body">
                @if (Model.Skin.Previews.Any())
                {
                    <div class="col-sm-2" style="padding:0;">
                        <!-- Indicators -->
                        <ol class="carousel-indicators">
                            @foreach (var preview in previews)
                            {
                                <li data-item="@(preview.Item2)" data-target="#carousel-previews" data-slide-to="@(preview.Item2)" class="@(preview.Item2 == 0 ? "activeIndicator" : "")">
                                    <div>
                                    </div>
                                    <img src="@(preview.Item1.PreviewImage)" />
                                </li>
                            }
                        </ol>
                    </div>
                    <div class="col-sm-10">
                        <div id="carousel-previews" class="carousel slide" data-ride="carousel">
                            <!-- Wrapper for slides -->
                            <div class="carousel-inner" role="listbox">
                                @foreach (var preview in previews)
                                {
                                    var dragon = FRSkinTester.Infrastructure.DataModels.DragonCache.FromString(preview.Item1.DragonData);
                                    <div class="item @(preview.Item2 == 0 ? "active" : "")" data-item="@(preview.Item2)">
                                        <div class="row">
                                            <img id="Preview@(preview.Item2)" class="center-block" src="@(preview.Item1.PreviewImage)" data-toggle="popover">
                                            <div id="Preview@(preview.Item2)_popover" class="hide">
                                                <ul style="list-style:none; padding:0">
                                                    <li><b>Colors:</b> @(dragon.BodyColor) / @(dragon.WingColor) / @(dragon.TertiaryColor)</li>
                                                    <li><b>Genes:</b> @(dragon.BodyGene) / @(dragon.WingGene) / @(dragon.TertiaryGene)</li>

                                                    <li><b>Element:</b> @(dragon.Element)</li>
                                                    <li><b>Eyetype:</b> @(dragon.EyeType.GetDescription())</li>
                                                </ul>
                                            </div>
                                        </div>
                                        <div class="text-center">
                                            <b>@(preview.Item1.DragonId != null ? "Real dragon" : "Scry dragon")</b>
                                            @if (preview.Item1.ScryerUrl != null)
                                            {
                                                @: - <a href="@($"http://www1.flightrising.com/scrying/predict?breed={(int)dragon.DragonType}&gender={(int)dragon.Gender}&age={(int)dragon.Age}&bodygene={(int)dragon.BodyGene}&body={(int)dragon.BodyColor}&winggene={(int)dragon.WingGene}&wings={(int)dragon.WingColor}&tertgene={(int)dragon.TertiaryGene}&tert={(int)dragon.TertiaryColor}&element={(int)dragon.Element}&eyetype={(int)dragon.EyeType}")" target="_blank">Visit scrying workshop</a>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <p>Nobody has generated any previews yet : (</p>
                }
            </div>
        </div>
    </div>

    <div class="col-md-5">
        <div class="panel panel-info">
            <div class="panel-heading">
                Fancy graphs and stats
            </div>
            <div class="panel-body">
                @if (previews.Any())
                {
                    var previewsPerDay = scries.Concat(reals).Where(x => x.Item1.PreviewTime != null).GroupBy(x => x.Item1.PreviewTime.Value.Date).Select(x => (x.Key, x.Count()));
                    <div>
                        <p>
                            <b>Previews:</b> @(scries.Count + reals.Count) total <span class="small">(@(reals.Count) real, @(scries.Count) @(scries.Count == 1 ? "scry" : "scries"))</span><br />
                            <b>Avg. Daily:</b> @(previewsPerDay.Any() ? previewsPerDay.Average(x => x.Item2) : 0) previews
                        </p>
                    </div>
                    <canvas id="PreviewGraph" style="height:200px; width:100%;"></canvas>
                    <div style="margin-bottom:5px">
                        <b>Color usage</b>
                    </div>
                    <canvas id="PrimaryColorGraph" style="height:140px; width:33%;float:left;"></canvas>
                    <canvas id="SecondaryColorGraph" style="height:140px; width:33%;float:left;"></canvas>
                    <canvas id="TertiaryColorGraph" style="height:140px; width:33%;float:left;"></canvas>
                    <div style="margin-bottom:5px">
                        <b>Gene usage</b>
                    </div>
                    <canvas id="PrimaryGeneGraph" style="height:140px; width:33%;float:left;"></canvas>
                    <canvas id="SecondaryGeneGraph" style="height:140px; width:33%;float:left;"></canvas>
                    <canvas id="TertiaryGeneGraph" style="height:140px; width:33%;float:left;"></canvas>
                }
                else
                {
                    <p>Nobody has generated any previews yet : (</p>
                }
            </div>
        </div>
    </div>

    <div class="col-md-12">
        <div class="panel panel-warning">
            <div class="panel-heading">
                Thar be dangerous stuff  'ere
            </div>
            <div class="panel-body">
                <div class="form-group">
                    This will permanently delete your skin!&nbsp;
                    <span>
                        <a class="btn btn-xs btn-danger" href="@Url.RouteUrl("Delete", new { SkinId = Model.Skin.GeneratedId, SecretKey = Model.Skin.SecretKey })" onclick="return userConfirm();">Delete your skin</a>
                    </span>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    userConfirm = function () {
        return confirm("This will permanently delete your skin from this tool, are you sure?");
    };
    @{
        var previewTimeData = reals.Concat(scries).Where(x => x.Item1.PreviewTime != null).Select(x => x.Item1.PreviewTime).OrderBy(x => x.Value).GroupBy(x => x.Value.Date).Select(x => (x.First().Value.ToString("dd/MM/yyyy"), x.Count()));
        var previewColorData = previewDragons.Select(x => (x.BodyColor, x.WingColor, x.TertiaryColor)).ToList();
        var previewGeneData = previewDragons.Select(x => (x.BodyGene, x.WingGene, x.TertiaryGene)).ToList();
    }
    $(document).ready(function () {
        $('#carousel-previews').on('slide.bs.carousel', function (event) {
            var item = $(event.relatedTarget).attr('data-item');
            $('.carousel-indicators li.activeIndicator').removeClass('activeIndicator');
            $(`.carousel-indicators li[data-item="${item}"]`).addClass('activeIndicator');
        });
        new Chart(document.getElementById(`PreviewGraph`).getContext('2d'), {
            type: 'line',
            data: {
                labels: [@Html.Raw(string.Join(", ", previewTimeData.Select(x => $"'{x.Item1}'")))],
                datasets: [{
                    label: 'Previews',
                    data: [@string.Join(", ", previewTimeData.Select(x => x.Item2))],
                    borderColor: '#bce8f1',
                    backgroundColor: '#d9edf7'
                }]
            }
        });
        new Chart(document.getElementById(`PrimaryColorGraph`).getContext('2d'), {
            type: 'pie',
            data: {
                labels: [@Html.Raw(string.Join(", ", previewColorData.GroupBy(x => x.Item1).Select(x => $"'{x.Key.ToString()}'")))],
                datasets: [{
                    label: 'Primary',
                    data: [@string.Join(", ", previewColorData.GroupBy(x => x.Item1).Select(x => x.Count()))]
                }]
            },
            options: {
                plugins: { colorschemes: { scheme: 'brewer.Set3-12' } },
                responsive: false,
                legend: { display: false }
            }
        });
        new Chart(document.getElementById(`SecondaryColorGraph`).getContext('2d'), {
            type: 'pie',
            data: {
                labels: [@Html.Raw(string.Join(", ", previewColorData.GroupBy(x => x.Item2).Select(x => $"'{x.Key.ToString()}'")))],
                datasets: [{
                    label: 'Secondary',
                    data: [@string.Join(", ", previewColorData.GroupBy(x => x.Item2).Select(x => x.Count()))]
                }]
            },
            options: {
                plugins: { colorschemes: { scheme: 'brewer.Set3-12' } },
                responsive: false,
                legend: { display: false }
            }
        });
        new Chart(document.getElementById(`TertiaryColorGraph`).getContext('2d'), {
            type: 'pie',
            data: {
                labels: [@Html.Raw(string.Join(", ", previewColorData.GroupBy(x => x.Item3).Select(x => $"'{x.Key.ToString()}'")))],
                datasets: [{
                    label: 'Tertiary',
                    data: [@string.Join(", ", previewColorData.GroupBy(x => x.Item3).Select(x => x.Count()))]
                }]
            },
            options: {
                plugins: { colorschemes: { scheme: 'brewer.Set3-12' } },
                responsive: false,
                legend: { display: false }
            }
        });
        new Chart(document.getElementById(`PrimaryGeneGraph`).getContext('2d'), {
            type: 'pie',
            data: {
                labels: [@Html.Raw(string.Join(", ", previewGeneData.GroupBy(x => x.Item1).Select(x => $"'{x.Key.ToString()}'")))],
                datasets: [{
                    label: 'Primary',
                    data: [@string.Join(", ", previewGeneData.GroupBy(x => x.Item1).Select(x => x.Count()))]
                }]
            },
            options: {
                plugins: { colorschemes: { scheme: 'brewer.Set2-8' } },
                responsive: false,
                legend: { display: false }
            }
        });
        new Chart(document.getElementById(`SecondaryGeneGraph`).getContext('2d'), {
            type: 'pie',
            data: {
                labels: [@Html.Raw(string.Join(", ", previewGeneData.GroupBy(x => x.Item2).Select(x => $"'{x.Key.ToString()}'")))],
                datasets: [{
                    label: 'Secondary',
                    data: [@string.Join(", ", previewGeneData.GroupBy(x => x.Item2).Select(x => x.Count()))]
                }]
            },
            options: {
                plugins: { colorschemes: { scheme: 'brewer.Set2-8' } },
                responsive: false,
                legend: { display: false }
            }
        });
        new Chart(document.getElementById(`TertiaryGeneGraph`).getContext('2d'), {
            type: 'pie',
            data: {
                labels: [@Html.Raw(string.Join(", ", previewGeneData.GroupBy(x => x.Item3).Select(x => $"'{x.Key.ToString()}'")))],
                datasets: [{
                    label: 'Tertiary',
                    data: [@string.Join(", ", previewGeneData.GroupBy(x => x.Item3).Select(x => x.Count()))]
                }]
            },
            options: {
                plugins: { colorschemes: { scheme: 'brewer.Set2-8' } },
                responsive: false,
                legend: { display: false }
            }
        });
    });

    $("[data-toggle=popover]").each(function (i, obj) {
        $(this).popover({
            html: true,
            content: function () {
                var id = $(this).attr('id');
                return $(`#${id}_popover`).html();
            },
            trigger: 'hover focus',
            container: 'body'
        });

    });
</script>

<style>
    .popover {
        max-width: 100%;
        z-index: 100;
    }

    .carousel-indicators {
        position: initial;
        margin-left: 0;
        overflow-y: auto;
        max-height: 370px;
        direction: rtl;
        padding-right: 0;
        width: unset;
        margin-bottom: 0;
    }

        .carousel-indicators li {
            direction: ltr;
            display: block;
            background: unset;
            border: unset;
            text-indent: 0;
            width: unset;
            height: unset;
            transition: all 1s ease-in-out;
            -moz-transition: all 1s ease-in-out;
            -webkit-transition: all 1s;
            padding: 3px;
        }

            .carousel-indicators li.activeIndicator {
                background-color: #d9edf7;
            }

            .carousel-indicators li img {
                width: 100%;
                height: 100%;
            }
</style>
