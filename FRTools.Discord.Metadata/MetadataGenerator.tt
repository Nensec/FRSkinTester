<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(packagesFolder)\Newtonsoft.Json.12.0.3\lib\net45\Newtonsoft.Json.dll" #>
<#@ assembly name="$(discordBot)\FRTools.Discord.exe" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="FRTools.Discord.Modules" #>
<#@ output extension=".json" #>
<#
var botAssembly = Assembly.GetAssembly(typeof(BaseModule));
var modules = botAssembly.GetTypes().Where(x => x.BaseType == typeof(BaseModule));
var output = new List<ModuleTemplate>();

foreach(var module in modules)
{
	var moduleAttributes = module.GetCustomAttributes();
	
	var moduleTemplate = new ModuleTemplate();

	var nameAttribute = moduleAttributes.FirstOrDefault(x => x.GetType().Name == "NameAttribute");
	moduleTemplate.Name = (string)nameAttribute.GetType().GetProperty("Text").GetValue(nameAttribute);

	var summaryAttribute = moduleAttributes.FirstOrDefault(x => x.GetType().Name == "SummaryAttribute");
	if(summaryAttribute != null)
		moduleTemplate.Description = (string)summaryAttribute.GetType().GetProperty("Text").GetValue(summaryAttribute);

	var groupAttribute = moduleAttributes.FirstOrDefault(x => x.GetType().Name == "GroupAttribute");
	if(groupAttribute != null)
	{
		var group = (string)groupAttribute.GetType().GetProperty("Prefix").GetValue(groupAttribute);
		var aliasAttribute = moduleAttributes.FirstOrDefault(x => x.GetType().Name == "AliasAttribute");		
		moduleTemplate.Aliases = aliasAttribute == null ? new[] { group } : ((string[])aliasAttribute.GetType().GetProperty("Aliases").GetValue(aliasAttribute)).Concat(new[] { group }).ToArray();
	}
	
	var reqOwnerAttribute = moduleAttributes.FirstOrDefault(x => x.GetType().Name == "RequireOwnerAttribute");
	var reqPermAttributes = moduleAttributes.Where(x => x.GetType().Name == "RequireUserPermissionAttribute");
	long guildPermRequired = 0, channelPermRequired = 0;
	if(reqPermAttributes.Any())
	{
		guildPermRequired = reqPermAttributes.Select(x => {
			var guildPerm = x.GetType().GetProperty("GuildPermission").GetValue(x);
			return guildPerm != null ? (long)(ulong)guildPerm : 0;
		}).Sum();

		channelPermRequired = reqPermAttributes.Select(x => {
			var channelPerm = x.GetType().GetProperty("ChannelPermission").GetValue(x);
			return channelPerm != null ? (long)(ulong)channelPerm : 0;
		}).Sum();
	}

	var methods = module.GetMethods((BindingFlags)20).Where(x => x.ReturnType == typeof(Task));
	foreach(var method in methods)
	{
		var commandTemplate = new CommandTemplate();
		var methodAttributes = method.GetCustomAttributes();

		var cmdNameAttribute = methodAttributes.FirstOrDefault(x => x.GetType().Name == "NameAttribute");
		commandTemplate.Name = (string)cmdNameAttribute.GetType().GetProperty("Text").GetValue(cmdNameAttribute);

		var cmdSummaryAttribute = methodAttributes.FirstOrDefault(x => x.GetType().Name == "SummaryAttribute");
		if(cmdSummaryAttribute != null)
			commandTemplate.Description = (string)cmdSummaryAttribute.GetType().GetProperty("Text").GetValue(cmdSummaryAttribute);

		var commandAttribute = methodAttributes.FirstOrDefault(x => x.GetType().Name == "CommandAttribute");
		var commandName = (string)commandAttribute.GetType().GetProperty("Text").GetValue(commandAttribute);

		var cmdAliasAttribute = methodAttributes.FirstOrDefault(x => x.GetType().Name == "AliasAttribute");
		commandTemplate.Aliases = cmdAliasAttribute == null ? new[] { commandName } : ((string[])cmdAliasAttribute.GetType().GetProperty("Aliases").GetValue(cmdAliasAttribute)).Concat(new[] { commandName }).ToArray();

		commandTemplate.RequireOwner = reqOwnerAttribute != null || methodAttributes.Any(x => x.GetType().Name == "RequireOwnerAttribute");

		var cmdReqPermAttributes = methodAttributes.Where(x => x.GetType().Name == "RequireUserPermissionAttribute");
		long cmdGuildPermRequired = guildPermRequired, cmdChannelPermRequired = channelPermRequired;
		if(cmdReqPermAttributes.Any())
		{
			cmdGuildPermRequired += cmdReqPermAttributes.Select(x => {
				var guildPerm = x.GetType().GetProperty("GuildPermission").GetValue(x);
				return guildPerm != null ? (long)(ulong)guildPerm : 0;
			}).Sum();

			cmdChannelPermRequired += cmdReqPermAttributes.Select(x => {
				var channelPerm = x.GetType().GetProperty("ChannelPermission").GetValue(x);
				return channelPerm != null ? (long)(ulong)channelPerm : 0;
			}).Sum();
		}

		commandTemplate.RequireGuildPermission = cmdGuildPermRequired;
		commandTemplate.RequireChannelPermission = cmdChannelPermRequired;

		moduleTemplate.Commands.Add(commandTemplate);
	}

	output.Add(moduleTemplate);
}
var json = JsonConvert.SerializeObject(output);
#>
<#= json #>
<#+
	class ModuleTemplate
	{
		public string Name { get; set; }
		public string Description { get; set; }
		public string[] Aliases { get; set; }
		public List<CommandTemplate> Commands { get; set; } = new List<CommandTemplate>();
	}

	class CommandTemplate
	{
		public string Name { get; set; }
		public string Description { get; set; }
		public string[] Aliases { get; set; }
		public long RequireGuildPermission { get; set; }
		public long RequireChannelPermission { get; set; }
		public bool RequireOwner { get; set; }
	}
#>