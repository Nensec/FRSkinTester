<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(packagesFolder)\Newtonsoft.Json.12.0.3\lib\net45\Newtonsoft.Json.dll" #>
<#@ assembly name="$(discordBot)\FRTools.Discord.exe" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="FRTools.Discord.Modules" #>
<#@ output extension=".json" #>
<#
var botAssembly = Assembly.GetAssembly(typeof(BaseModule));
var modules = botAssembly.GetTypes().Where(x => x.BaseType == typeof(BaseModule));
var guildHandler = botAssembly.GetTypes().First(x => x.Name == "GuildHandler");
var output = new DiscordMetadata();

var botSettingsAttributes = guildHandler.GetCustomAttributes().Where(x => x.GetType().Name == "DiscordSettingAttribute");
foreach(var botSettingAttribute in botSettingsAttributes)
{
	var settingTemplate = new SettingTemplate();
	settingTemplate.Name = (string)botSettingAttribute.GetType().GetProperty("Name").GetValue(botSettingAttribute);
	settingTemplate.Description = (string)botSettingAttribute.GetType().GetProperty("Description").GetValue(botSettingAttribute);
	settingTemplate.Key = (string)botSettingAttribute.GetType().GetProperty("Key").GetValue(botSettingAttribute);
	settingTemplate.Type = ((Type)botSettingAttribute.GetType().GetProperty("Type").GetValue(botSettingAttribute)).Name;
	settingTemplate.ExtraArgs = (string[])botSettingAttribute.GetType().GetProperty("ExtraArgs").GetValue(botSettingAttribute);
	output.BotSettings.Add(settingTemplate);
}

foreach(var module in modules)
{
	var moduleAttributes = module.GetCustomAttributes();
	
	var moduleTemplate = new ModuleTemplate();

	var nameAttribute = moduleAttributes.FirstOrDefault(x => x.GetType().Name == "NameAttribute");
	moduleTemplate.Name = (string)nameAttribute.GetType().GetProperty("Text").GetValue(nameAttribute);

	var settingAttributes = moduleAttributes.Where(x => x.GetType().Name == "DiscordSettingAttribute");
	foreach(var settingAttribute in settingAttributes)
	{
		var settingTemplate = new SettingTemplate();
		settingTemplate.Name = (string)settingAttribute.GetType().GetProperty("Name").GetValue(settingAttribute);
		settingTemplate.Description = (string)settingAttribute.GetType().GetProperty("Description").GetValue(settingAttribute);
		settingTemplate.Key = (string)settingAttribute.GetType().GetProperty("Key").GetValue(settingAttribute);
		settingTemplate.Type = ((Type)settingAttribute.GetType().GetProperty("Type").GetValue(settingAttribute)).Name;
		settingTemplate.ExtraArgs = (string[])settingAttribute.GetType().GetProperty("ExtraArgs").GetValue(settingAttribute);
		moduleTemplate.Settings.Add(settingTemplate);
	}

	var summaryAttribute = moduleAttributes.FirstOrDefault(x => x.GetType().Name == "SummaryAttribute");
	if(summaryAttribute != null)
		moduleTemplate.Description = (string)summaryAttribute.GetType().GetProperty("Text").GetValue(summaryAttribute);

	var moduleHelpAttribute = moduleAttributes.FirstOrDefault(x => x.GetType().Name == "DiscordHelpAttribute");
	if(moduleHelpAttribute != null)
	{
		var help = new HelpTemplate();
		help.Synopsis = (string)moduleHelpAttribute.GetType().GetProperty("Synopsis").GetValue(moduleHelpAttribute);
		help.Detailed = (string)moduleHelpAttribute.GetType().GetProperty("Detailed").GetValue(moduleHelpAttribute);
		help.Images = (string[])moduleHelpAttribute.GetType().GetProperty("Images").GetValue(moduleHelpAttribute);
		help.IconBase64 = (string)moduleHelpAttribute.GetType().GetProperty("IconBase64").GetValue(moduleHelpAttribute);
		var permissionValue = moduleHelpAttribute.GetType().GetProperty("RequiresPermission").GetValue(moduleHelpAttribute);
		if(permissionValue != null)
			help.RequiresGuildPermission = (long)(ulong)permissionValue;
		moduleTemplate.Help = help;
	}

	var groupAttribute = moduleAttributes.FirstOrDefault(x => x.GetType().Name == "GroupAttribute");
	if(groupAttribute != null)
	{
		var group = (string)groupAttribute.GetType().GetProperty("Prefix").GetValue(groupAttribute);
		var aliasAttribute = moduleAttributes.FirstOrDefault(x => x.GetType().Name == "AliasAttribute");		
		moduleTemplate.Aliases = aliasAttribute == null ? new[] { group } : ((string[])aliasAttribute.GetType().GetProperty("Aliases").GetValue(aliasAttribute)).Concat(new[] { group }).ToArray();
	}
	
	var reqOwnerAttribute = moduleAttributes.FirstOrDefault(x => x.GetType().Name == "RequireOwnerAttribute");
	moduleTemplate.RequireOwner = reqOwnerAttribute != null;

	var reqPermAttributes = moduleAttributes.Where(x => x.GetType().Name == "RequireUserPermissionAttribute");
	long guildPermRequired = 0, channelPermRequired = 0;
	if(reqPermAttributes.Any())
	{
		foreach(var reqPermAttribute in reqPermAttributes)
		{
			var guildPerm = reqPermAttribute.GetType().GetProperty("GuildPermission").GetValue(reqPermAttribute);
			guildPermRequired |= guildPerm != null ? (long)(ulong)guildPerm : 0;

			var channelPerm = reqPermAttribute.GetType().GetProperty("ChannelPermission").GetValue(reqPermAttribute);
			channelPermRequired |= channelPerm != null ? (long)(ulong)channelPerm : 0;
		}
	}

	var methods = module.GetMethods((BindingFlags)20).Where(x => x.ReturnType == typeof(Task));
	foreach(var method in methods)
	{
		var commandTemplate = new CommandTemplate();
		var methodAttributes = method.GetCustomAttributes();

		var cmdNameAttribute = methodAttributes.FirstOrDefault(x => x.GetType().Name == "NameAttribute");
		if(cmdNameAttribute == null)
			continue;

		commandTemplate.Name = (string)cmdNameAttribute.GetType().GetProperty("Text").GetValue(cmdNameAttribute);

		var cmdSummaryAttribute = methodAttributes.FirstOrDefault(x => x.GetType().Name == "SummaryAttribute");
		if(cmdSummaryAttribute != null)
			commandTemplate.Description = (string)cmdSummaryAttribute.GetType().GetProperty("Text").GetValue(cmdSummaryAttribute);

		var commandHelpAttribute = methodAttributes.FirstOrDefault(x => x.GetType().Name == "DiscordHelpAttribute");
		if(commandHelpAttribute != null)
		{
			var help = new HelpTemplate();
			help.Synopsis = (string)commandHelpAttribute.GetType().GetProperty("Synopsis").GetValue(commandHelpAttribute);
			help.Detailed = (string)commandHelpAttribute.GetType().GetProperty("Detailed").GetValue(commandHelpAttribute);
			help.Images = (string[])commandHelpAttribute.GetType().GetProperty("Images").GetValue(commandHelpAttribute);
			help.IconBase64 = (string)commandHelpAttribute.GetType().GetProperty("IconBase64").GetValue(commandHelpAttribute);
			var permissionValue = commandHelpAttribute.GetType().GetProperty("RequiresPermission").GetValue(commandHelpAttribute);
			if(permissionValue != null)
				help.RequiresGuildPermission = (long)(ulong)permissionValue;
			commandTemplate.Help = help;
		}

		var commandAttribute = methodAttributes.FirstOrDefault(x => x.GetType().Name == "CommandAttribute");
		var commandName = (string)commandAttribute.GetType().GetProperty("Text").GetValue(commandAttribute);

		var cmdAliasAttribute = methodAttributes.FirstOrDefault(x => x.GetType().Name == "AliasAttribute");
		commandTemplate.Aliases = cmdAliasAttribute == null ? new[] { commandName } : ((string[])cmdAliasAttribute.GetType().GetProperty("Aliases").GetValue(cmdAliasAttribute)).Concat(new[] { commandName }).ToArray();

		commandTemplate.RequireOwner = reqOwnerAttribute != null || methodAttributes.Any(x => x.GetType().Name == "RequireOwnerAttribute");

		var cmdReqPermAttributes = methodAttributes.Where(x => x.GetType().Name == "RequireUserPermissionAttribute");
		long cmdGuildPermRequired = guildPermRequired, cmdChannelPermRequired = channelPermRequired;
		if(cmdReqPermAttributes.Any())
		{
			foreach(var cmdReqPermAttribute in cmdReqPermAttributes)
			{
				var guildPerm = cmdReqPermAttribute.GetType().GetProperty("GuildPermission").GetValue(cmdReqPermAttribute);
				cmdGuildPermRequired |= guildPerm != null ? (long)(ulong)guildPerm : 0;

				var channelPerm = cmdReqPermAttribute.GetType().GetProperty("ChannelPermission").GetValue(cmdReqPermAttribute);
				cmdChannelPermRequired |= channelPerm != null ? (long)(ulong)channelPerm : 0;
			}
		}

		commandTemplate.RequireGuildPermission = cmdGuildPermRequired;
		commandTemplate.RequireChannelPermission = cmdChannelPermRequired;

		moduleTemplate.Commands.Add(commandTemplate);
	}

	output.Modules.Add(moduleTemplate);
}
var json = JsonConvert.SerializeObject(output);
#>
<#= json #>
<#+
	class DiscordMetadata
	{
		public List<SettingTemplate> BotSettings { get; set; } = new List<SettingTemplate>();
		public List<ModuleTemplate> Modules { get; set; } = new List<ModuleTemplate>();
	}

	class ModuleTemplate
	{
		public string Name { get; set; }
		public string Description { get; set; }
		public string[] Aliases { get; set; }
		public bool RequireOwner { get; set; }
		public List<CommandTemplate> Commands { get; set; } = new List<CommandTemplate>();
		public List<SettingTemplate> Settings { get; set; } = new List<SettingTemplate>();
		public HelpTemplate Help { get; set; }
	}

	class CommandTemplate
	{
		public string Name { get; set; }
		public string Description { get; set; }
		public string[] Aliases { get; set; }
		public long RequireGuildPermission { get; set; }
		public long RequireChannelPermission { get; set; }
		public bool RequireOwner { get; set; }
		public HelpTemplate Help { get; set; }
	}

	class SettingTemplate
	{
		public string Name { get; set; }
		public string Description { get; set; }
		public string Type { get; set; }
		public string Key { get; set; }
		public string[] ExtraArgs { get; set; }
	}

	class HelpTemplate
	{
		public string Synopsis { get; set; }
		public string Detailed { get; set; }
		public string[] Images { get; set; }
		public string IconBase64 { get; set; }
		public long RequiresGuildPermission { get; set; }
	}
#>