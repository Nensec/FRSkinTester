@model UploadModelPost

@{
    ViewBag.Title = "Upload";
}

@section meta{
    <meta property="og:title" content="Upload a new skin" />
    <meta property="og:image" content="/Content/frskintester_embed.png" />
    <meta property="og:url" content="@Url.RouteUrl("Upload")" />
    <meta property="og:description" content="Upload your skin on this page, you will be given a link to share where users can preview your skin on their dragons or scries" />
}

<div class="panel panel-default">
    <div class="panel-heading">
        <h4>Upload your skin</h4>
    </div>
    <div class="panel-body" style="min-height:370px">
        <p>Selecting a file, even without actually uploading, will give you some useful information such as the coverage % and an indication if there is anything outside the dragon</p>
        @using (Html.BeginRouteForm("UploadPost", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.TextBoxFor(model => model.Title, htmlAttributes: new { @class = "form-control" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.TextAreaFor(model => model.Description, htmlAttributes: new { @class = "form-control", rows = 3 })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.DragonType, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            <select class="form-control" name="@(Html.NameFor(model => model.DragonType))" id="@(Html.IdFor(model => model.DragonType))">
                                <option disabled>- Modern -</option>
                                @foreach (var breed in GeneratedFRHelpers.GetModernBreeds())
                                {
                                    <option value="@((int)breed)">@(breed.GetDescription())</option>
                                }
                                <option disabled>- Ancient -</option>
                                @foreach (var breed in GeneratedFRHelpers.GetAncientBreeds())
                                {
                                    <option value="@((int)breed)">@(breed.GetDescription())</option>
                                }
                            </select>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            <select class="form-control" name="@(Html.NameFor(model => model.Gender))" id="@(Html.IdFor(model => model.Gender))">
                                @foreach (var gender in Enum.GetValues(typeof(Gender)).Cast<Gender>())
                                {
                                    <option value="@((int)gender)">@(gender.GetDescription())</option>
                                }
                            </select>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Skin, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            <span class="control-fileupload">
                                <label for="file" class="text-left">Please choose a file on your computer.</label>
                                <input type="file" accept=".png" name="@(Html.NameFor(model => model.Skin))" id="@(Html.IdFor(model => model.Skin))" />
                            </span>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-4 col-md-8">
                            <div class=" alert alert-warning">
                                If you are uploading a new version of a skin, please go to your skin's management page and upload a new version there!
                                <span class="glyphicon glyphicon-info-sign" data-toggle="tooltip" title="The reason for this is that every skin gets their own bit.ly link, however I only have a limited amount available every month. Updating a skin will re-use that skin's link."></span>
                            </div>
                            <input type="submit" value="Upload Skin" class="btn btn-primary" />
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="panel panel-default">
                        <div class="panel-body">
                            <div id="CoverageContainer" style="display:none;">
                                <div class="text-center">
                                    Coverage: <b><span id="Coverage"></span>%</b>
                                    Outside: <b><span id="Outside"></span>%</b>
                                    <br/>
                                    <small class="text-center"><a href="@(Url.RouteUrl("SnippetsHome"))#skin_coverage">Looking for the new advanced coverage checker? It's a code snippet now!</a></small>
                                </div>
                            </div>
                            <div id="skinpreview" style="margin-top:5px">
                                <div class="center-block" style="width:350px;height:350px;">
                                    <img class="dummyDragon" style="z-index:1;position:absolute;display:none;" />
                                    <img class="preview" style="z-index:2;position:absolute;display:none;" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<script>
    setDummySource = function () {
        var dragonType = $('#@(Html.IdFor(model => model.DragonType))').val();
        var gender = $('#@(Html.IdFor(model => model.Gender))').val();

        $('.dummyDragon').show().attr('src', `@Url.Action("GetDummyDragon")?dragonType=${dragonType}&gender=${gender}`);
        var dragonImage = new Image();
        dragonImage.onload = function () {
            updateCoverage(undefined, dragonImage);
        };
        dragonImage.src = $('.dummyDragon').attr('src');
    };

    $('#@(Html.IdFor(model => model.DragonType)), #@(Html.IdFor(model => model.Gender))').change(setDummySource);

    $('#@(Html.IdFor(model => model.Skin))').change(function () {
        var t = $(this).val();
        var labelText = 'File : ' + t.substr(12, t.length);
        $(this).prev('label').text(labelText);
        var file = this.files[0];
        var reader = new FileReader();

        reader.onload = function (e) {
            if (file && file.type === 'image/png') {
                var skinImage = new Image();
                skinImage.onload = function () {
                    $('.preview').show().attr('src', e.target.result);
                    updateCoverage(skinImage);
                };
                skinImage.src = e.target.result;
            }
            else {
                $('.preview').hide();
            }
        };

        reader.readAsDataURL(file);
    });

    var skinImg, dragonImg;

    $('document').ready(function () {
        dragonImg = new Image();
        setDummySource();
    });

    updateCoverage = function (skinImage, dragonImage) {
        if (dragonImage === undefined) {
            dragonImage = dragonImg;
        } else {
            dragonImg = dragonImage;
        }

        if (skinImage === undefined) {
            skinImage = skinImg;
        } else {
            skinImg = skinImage;
        }

        if (!skinImage || !dragonImage)
            return;

        var dragonContext = $('#dragon')[0].getContext('2d');
        dragonContext.clearRect(0, 0, 350, 350);
        dragonContext.drawImage(dragonImage, 0, 0, 350, 350, 0, 0, 350, 350);

        var skinContext = $('#skin')[0].getContext('2d');
        skinContext.clearRect(0, 0, 350, 350);
        skinContext.drawImage(skinImage, 0, 0, 350, 350);

        var coveringAlphaSum = 0;
        var coveringPixelCount = 0;
        var outsideAlphaSum = 0;
        var outsidePixelCount = 0;

        var skinImageData = skinContext.getImageData(0, 0, 350, 350).data;
        var dragonImageData = dragonContext.getImageData(0, 0, 350, 350).data;

        for (var i = 0; i < skinImageData.length; i += 4) {
            if (dragonImageData[i + 3] > 95) {
                coveringAlphaSum += skinImageData[i + 3];
                coveringPixelCount++;
            }
            else {
                if (dragonImageData[i + 3] == 0) {
                    outsideAlphaSum += skinImageData[i + 3];
                    outsidePixelCount++;
                }
            }
        }

        var coverage = (coveringAlphaSum / coveringPixelCount / 255 * 100).toFixed(2);
        var outside = (outsideAlphaSum / outsidePixelCount / 255 * 100).toFixed(2);

        var coveringContainer = $('#CoverageContainer').show();
        coveringContainer.find('#Coverage').html(coverage);
        coveringContainer.find('#Outside').html(outside);
    };
</script>

<canvas width="350" height="350" id="skin" style="display:none;"></canvas>
<canvas width="350" height="350" id="dragon" style="display:none;"></canvas>
